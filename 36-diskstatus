#!/bin/bash

# config
MAX_TEMP=40
# set column width
COLUMNS=2
# colors
white="\e[39m"
green="\e[1;32m"
red="\e[1;31m"
dim="\e[2m"
undim="\e[0m"

# disks to check
disks=($(lsblk -ndo NAME,TYPE | awk '$2=="disk" && $1 !~ /^zd/ && $1 !~ /^loop/{print "/dev/"$1}'))

# logfiles to check
logfiles='/var/log/syslog /var/log/syslog.1'

# get all lines with smartd entries from syslog
lines=$(tac $logfiles | grep -hiP 'smartd\[[[:digit:]]+\]:' | grep -iP "previous self-test")

get_drive_temperature() {
    local drive="$1"

    # Check if device exists
    if [[ ! -b "$drive" ]]; then
        echo "Error: Drive '$drive' not found." >&2
        return 1
    fi

    # Run smartctl without sudo
    local info
    if ! info="$(sudo smartctl -a "$drive" 2>/dev/null)"; then
        echo "Error: Failed to read SMART data from '$drive'." >&2
        return 1
    fi

    # Extract temperature from various possible fields
    local temp=""
    temp=$(echo "$info" | grep -E '194\s+Temp' | awk '{print $10}')
    [[ -z "$temp" ]] && temp=$(echo "$info" | grep -E '190\s+Airflow' | awk '{print $10}')
    [[ -z "$temp" ]] && temp=$(echo "$info" | grep 'Temperature Sensor 1:' | awk '{print $4}')
    [[ -z "$temp" ]] && temp=$(echo "$info" | grep 'Current Drive Temperature:' | awk '{print $4}')
    [[ -z "$temp" ]] && temp=$(echo "$info" | grep -m1 'Temperature:' | awk '{print $2}')

    if [[ -z "$temp" ]]; then
        echo "Error: Could not determine temperature for '$drive'." >&2
        return 1
    fi

    echo "$temp"
}

out=""
for i in "${!disks[@]}"; do
    disk=${disks[$i]}
    uuid=$(/usr/sbin/blkid -s UUID -o value "/dev/${disk}")
    status=$( (grep "${uuid}" <<< "${lines}") | grep -m 1 -oP "previous self-test.*" | awk '{ print $4 " " $5 }')
    temp=$(get_drive_temperature "${disk}")

    # color green if temp <= MAX_TEMP, else red
    if [[ "${temp}" -gt "${MAX_TEMP}" ]]; then
        color=$red
    else
        color=$green
    fi
    # add "C" if temp is numeric
    if [[ "$temp" =~ ^[0-9]+$ ]]; then
        temp="${temp}C"
    fi
    # color green if status is "without error", else red
    if [[ "${status}" == "without error" ]]; then
        status_color=$green
    else
        status_color=$red
    fi

    # print temp & smartd error
    out+="${disk}:,${color}${temp}${undim} | ${status_color}${status}${undim},"
    # insert \n every $COLUMNS column
    if [ $((($i+1) % $COLUMNS)) -eq 0 ]; then
        out+="\n"
    fi
done
out+="\n"

printf "\ndisk status:\n"
printf "$out" | column -ts $',' | sed -e 's/^/  /'
